{
  "name": "date-time-field",
  "type": "registry:ui",
  "registryDependencies": [
    "date-time-field-primitive",
    "input-base"
  ],
  "files": [
    {
      "path": "ui/date-time-field-primitive.tsx",
      "content": "import * as React from \"react\"\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\"\nimport { Primitive } from \"@radix-ui/react-primitive\"\n\nimport {\n  useTimescape,\n  UseTimescapeOptions,\n} from \"@/registry/default/hooks/use-timescape\"\n\nexport type DateTimeFieldContextProps = {\n  disabled?: boolean\n} & ReturnType<typeof useTimescape>\n\nconst DateTimeFieldContext = React.createContext<DateTimeFieldContextProps>({\n  getInputProps: () => ({ ref: () => null }),\n  getRootProps: () => ({ ref: () => null }),\n  options: {},\n  disabled: false,\n})\n\nexport const useDateTimeFieldContext = () =>\n  React.useContext(DateTimeFieldContext)\n\nexport interface DateTimeFieldProps\n  extends UseTimescapeOptions,\n    Omit<\n      React.ComponentPropsWithoutRef<typeof Primitive.div>,\n      \"value\" | \"defaultValue\"\n    > {\n  disabled?: boolean\n}\n\nexport const DateTimeField = React.forwardRef<\n  React.ElementRef<typeof Primitive.div>,\n  DateTimeFieldProps\n>(\n  (\n    {\n      value,\n      defaultValue,\n      onValueChange,\n      disabled,\n      digits,\n      hour12,\n      maxDate,\n      minDate,\n      snapToStep,\n      wheelControl,\n      wrapAround,\n      ...props\n    },\n    ref\n  ) => {\n    const timescape = useTimescape({\n      value,\n      defaultValue,\n      onValueChange,\n      digits,\n      hour12,\n      maxDate,\n      minDate,\n      snapToStep,\n      wheelControl,\n      wrapAround,\n    })\n\n    const { ref: rootRef, ...rootProps } = timescape.getRootProps()\n\n    const composedRefs = useComposedRefs(ref, (node) => rootRef(node)!)\n\n    return (\n      <DateTimeFieldContext.Provider value={{ ...timescape, disabled }}>\n        <Primitive.div\n          ref={composedRefs}\n          data-disabled={disabled}\n          {...rootProps}\n          {...props}\n        />\n      </DateTimeFieldContext.Provider>\n    )\n  }\n)\nDateTimeField.displayName = \"DateTimeField\"\n\nexport const DateTimeFieldSeparator = React.forwardRef<\n  React.ElementRef<typeof Primitive.span>,\n  React.ComponentPropsWithoutRef<typeof Primitive.span>\n>((props, ref) => {\n  const { disabled } = useDateTimeFieldContext()\n\n  return (\n    <Primitive.span\n      ref={ref}\n      aria-hidden=\"true\"\n      data-disabled={disabled}\n      {...props}\n    />\n  )\n})\nDateTimeFieldSeparator.displayName = \"DateTimeFieldSeparator\"\n\nexport const DateTimeFieldYears = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"years\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldYears.displayName = \"DateTimeFieldYears\"\n\nexport const DateTimeFieldMonths = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"months\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldMonths.displayName = \"DateTimeFieldMonths\"\n\nexport const DateTimeFieldDays = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"days\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldDays.displayName = \"DateTimeFieldDays\"\n\nexport const DateTimeFieldHours = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"hours\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldHours.displayName = \"DateTimeFieldHours\"\n\nexport const DateTimeFieldMinutes = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"minutes\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldMinutes.displayName = \"DateTimeFieldMinutes\"\n\nexport const DateTimeFieldSeconds = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"seconds\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldSeconds.displayName = \"DateTimeFieldSeconds\"\n\nexport const DateTimeFieldAmPm = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled, options } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"am/pm\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  if (!options?.hour12) {\n    return null\n  }\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldAmPm.displayName = \"DateTimeFieldAmPm\"\n\nconst Root = DateTimeField\nconst Separator = DateTimeFieldSeparator\nconst Days = DateTimeFieldDays\nconst Months = DateTimeFieldMonths\nconst Years = DateTimeFieldYears\nconst Hours = DateTimeFieldHours\nconst Minutes = DateTimeFieldMinutes\nconst Seconds = DateTimeFieldSeconds\nconst AmPm = DateTimeFieldAmPm\n\nexport { Root, Separator, Days, Months, Years, Hours, Minutes, Seconds, AmPm }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}