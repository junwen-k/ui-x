{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-time-range-field-primitive",
  "type": "registry:ui",
  "title": "Date Time Range Field Primitive",
  "description": "Date Time Range Field Primitive allows user to enter date and time value for a range of dates.",
  "dependencies": [
    "@radix-ui/react-compose-refs",
    "@radix-ui/react-primitive",
    "timescape"
  ],
  "files": [
    {
      "path": "src/registry/new-york/ui/date-time-range-field-primitive.tsx",
      "content": "\"use client\";\n\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as React from \"react\";\n\nimport {\n  UseTimescapeRangeOptions,\n  useTimescapeRange,\n} from \"@/registry/new-york/hooks/use-timescape\";\n\nexport type DateTimeRangeFieldContextProps = {\n  disabled?: boolean;\n} & ReturnType<typeof useTimescapeRange>;\n\nconst DateTimeRangeFieldContext =\n  React.createContext<DateTimeRangeFieldContextProps>({\n    from: {\n      getInputProps: () => ({ ref: () => null }),\n      options: {},\n    },\n    to: {\n      getInputProps: () => ({ ref: () => null }),\n      options: {},\n    },\n    getRootProps: () => ({ ref: () => null }),\n    disabled: false,\n  });\n\nexport function useDateTimeRangeField() {\n  const context = React.useContext(DateTimeRangeFieldContext);\n  if (!context) {\n    throw new Error(\n      \"useDateTimeRangeField must be used within a <DateTimeRangeField />.\",\n    );\n  }\n\n  return context;\n}\n\nexport interface DateTimeRangeFieldProps\n  extends UseTimescapeRangeOptions,\n    Omit<React.ComponentProps<typeof Primitive.div>, \"value\" | \"defaultValue\"> {\n  disabled?: boolean;\n}\n\nexport function DateTimeRangeField({\n  value,\n  defaultValue,\n  onValueChange,\n  disabled,\n  digits,\n  hour12,\n  maxDate,\n  minDate,\n  snapToStep,\n  wheelControl,\n  wrapAround,\n  from,\n  to,\n  ref,\n  ...props\n}: DateTimeRangeFieldProps) {\n  const timescape = useTimescapeRange({\n    value,\n    defaultValue,\n    onValueChange,\n    digits,\n    hour12,\n    maxDate,\n    minDate,\n    snapToStep,\n    wheelControl,\n    wrapAround,\n    from,\n    to,\n  });\n\n  const { ref: rootRef, ...rootProps } = timescape.getRootProps();\n  const composedRefs = useComposedRefs(ref, (node) => rootRef(node)!);\n\n  return (\n    <DateTimeRangeFieldContext.Provider value={{ ...timescape, disabled }}>\n      <Primitive.div\n        data-slot=\"date-time-range-field\"\n        ref={composedRefs}\n        data-disabled={disabled}\n        {...rootProps}\n        {...props}\n      />\n    </DateTimeRangeFieldContext.Provider>\n  );\n}\n\nexport function DateTimeRangeFieldSeparator(\n  props: React.ComponentProps<typeof Primitive.span>,\n) {\n  const { disabled } = useDateTimeRangeField();\n\n  return (\n    <Primitive.span\n      data-slot=\"date-time-range-field-separator\"\n      aria-hidden=\"true\"\n      data-disabled={disabled}\n      {...props}\n    />\n  );\n}\n\nconst DateTimeRangeFieldFromContext = React.createContext(false);\n\nexport function DateTimeRangeFieldFrom(\n  props: React.ComponentProps<typeof Primitive.div>,\n) {\n  return (\n    <DateTimeRangeFieldFromContext.Provider value={true}>\n      <Primitive.div data-slot=\"date-time-range-field-from\" {...props} />\n    </DateTimeRangeFieldFromContext.Provider>\n  );\n}\n\nconst DateTimeRangeFieldToContext = React.createContext(false);\n\nexport function DateTimeRangeFieldTo({\n  ref,\n  ...props\n}: React.ComponentProps<typeof Primitive.div>) {\n  return (\n    <DateTimeRangeFieldToContext.Provider value={true}>\n      <Primitive.div\n        data-slot=\"date-time-range-field-to\"\n        ref={ref}\n        {...props}\n      />\n    </DateTimeRangeFieldToContext.Provider>\n  );\n}\n\nfunction useDateTimeFieldSegment() {\n  const isFrom = React.useContext(DateTimeRangeFieldFromContext);\n  const isTo = React.useContext(DateTimeRangeFieldToContext);\n  const { disabled, from, to } = useDateTimeRangeField();\n\n  if (!isFrom && !isTo) {\n    throw new Error(\n      \"useDateTimeFieldSegment should be used within <DateTimeRangeFieldFrom /> or <DateTimeRangeFieldTo /> components\",\n    );\n  }\n\n  return {\n    ...(isFrom ? from : to),\n    disabled,\n  };\n}\n\nexport function DateTimeRangeFieldYears({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeFieldSegment();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"years\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-range-field-years\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeRangeFieldMonths({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeFieldSegment();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"months\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-range-field-months\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeRangeFieldDays({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeFieldSegment();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"days\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-range-field-days\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeRangeFieldHours({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeFieldSegment();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"hours\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-range-field-hours\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeRangeFieldMinutes({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeFieldSegment();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"minutes\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-range-field-minutes\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeRangeFieldSeconds({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeFieldSegment();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"seconds\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-range-field-seconds\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeRangeFieldAmPm({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, options, disabled } = useDateTimeFieldSegment();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"am/pm\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  if (!options?.hour12) {\n    return null;\n  }\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-range-field-am-pm\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport {\n  DateTimeRangeField as Root,\n  DateTimeRangeFieldFrom as From,\n  DateTimeRangeFieldTo as To,\n  DateTimeRangeFieldSeparator as Separator,\n  DateTimeRangeFieldYears as Years,\n  DateTimeRangeFieldMonths as Months,\n  DateTimeRangeFieldDays as Days,\n  DateTimeRangeFieldHours as Hours,\n  DateTimeRangeFieldMinutes as Minutes,\n  DateTimeRangeFieldSeconds as Seconds,\n  DateTimeRangeFieldAmPm as AmPm,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/new-york/hooks/use-timescape.ts",
      "content": "import { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport * as React from \"react\";\nimport { DateRange } from \"react-day-picker\";\nimport {\n  Options,\n  useTimescape as useReactTimescape,\n  useTimescapeRange as useReactTimescapeRange,\n} from \"timescape/react\";\n\nexport type TimescapeOptions = Omit<Options, \"date\" | \"onChangeDate\">;\n\nexport interface UseTimescapeOptions extends TimescapeOptions {\n  value?: Date | null;\n  defaultValue?: Date;\n  onValueChange?: (value: Date | null) => void;\n}\n\nexport function useTimescape({\n  value: valueProp,\n  defaultValue,\n  onValueChange,\n  digits,\n  hour12,\n  maxDate,\n  minDate,\n  snapToStep,\n  wheelControl,\n  wrapAround,\n}: UseTimescapeOptions) {\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { update, _manager, ...timescape } = useReactTimescape({\n    date: !value ? undefined : value, // This is the initial value.\n    onChangeDate: setValue,\n    digits,\n    hour12,\n    maxDate,\n    minDate,\n    snapToStep,\n    wheelControl,\n    wrapAround,\n    // Partial input does not work with reactive value at the moment.\n    // For more information, see https://github.com/dan-lee/timescape/issues/51.\n    disallowPartial: true,\n  });\n\n  React.useEffect(() => {\n    update((prevOptions) => ({\n      ...prevOptions,\n      date: !value ? undefined : value,\n    }));\n  }, [value, update]);\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, digits }));\n  }, [digits, update]);\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, hour12 }));\n  }, [hour12, update]);\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, maxDate }));\n  }, [maxDate, update]);\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, minDate }));\n  }, [minDate, update]);\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, snapToStep }));\n  }, [snapToStep, update]);\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, wheelControl }));\n  }, [wheelControl, update]);\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, wrapAround }));\n  }, [wrapAround, update]);\n\n  return timescape;\n}\n\nexport interface UseTimescapeRangeOptions extends TimescapeOptions {\n  value?: DateRange | null;\n  defaultValue?: DateRange;\n  onValueChange?: (value: DateRange | null) => void;\n  from?: TimescapeOptions;\n  to?: TimescapeOptions;\n}\n\nexport const useTimescapeRange = ({\n  value: valueProp,\n  defaultValue,\n  onValueChange,\n  digits,\n  hour12,\n  maxDate,\n  minDate,\n  snapToStep,\n  wheelControl,\n  wrapAround,\n  from: fromOptions = {},\n  to: toOptions = {},\n}: UseTimescapeRangeOptions) => {\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const { from, to, ...timescape } = useReactTimescapeRange({\n    from: {\n      date: !value?.from ? undefined : value.from, // This is the initial value.\n      onChangeDate: (from) =>\n        setValue((prevValue) => ({ from, to: prevValue?.to })),\n      digits,\n      hour12,\n      maxDate,\n      minDate,\n      snapToStep,\n      wheelControl,\n      wrapAround,\n      // Partial input does not work with reactive value at the moment.\n      // For more information, see https://github.com/dan-lee/timescape/issues/51.\n      disallowPartial: true,\n      ...fromOptions,\n    },\n    to: {\n      date: !value?.to ? undefined : value.to, // This is the initial value.\n      onChangeDate: (to) =>\n        setValue((prevValue) => ({ from: prevValue?.from, to })),\n      digits,\n      hour12,\n      maxDate,\n      minDate,\n      snapToStep,\n      wheelControl,\n      wrapAround,\n      // Partial input does not work with reactive value at the moment.\n      // For more information, see https://github.com/dan-lee/timescape/issues/51.\n      disallowPartial: true,\n      ...toOptions,\n    },\n  });\n\n  // ----------------------------------------------------------------------------\n  // Sync `from`\n  // ----------------------------------------------------------------------------\n\n  const { update: fromUpdate, ...fromTimescape } = from;\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      digits: fromOptions.digits ?? digits,\n    }));\n  }, [digits, fromOptions.digits, fromUpdate]);\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      hour12: fromOptions.hour12 ?? hour12,\n    }));\n  }, [hour12, fromOptions.hour12, fromUpdate]);\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      maxDate: fromOptions.maxDate ?? maxDate,\n    }));\n  }, [maxDate, fromOptions.maxDate, fromUpdate]);\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      minDate: fromOptions.minDate ?? minDate,\n    }));\n  }, [minDate, fromOptions.minDate, fromUpdate]);\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      snapToStep: fromOptions.snapToStep ?? snapToStep,\n    }));\n  }, [snapToStep, fromOptions.snapToStep, fromUpdate]);\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      wheelControl: fromOptions.wheelControl ?? wheelControl,\n    }));\n  }, [wheelControl, fromOptions.wheelControl, fromUpdate]);\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      wrapAround: fromOptions.wrapAround ?? wrapAround,\n    }));\n  }, [wrapAround, fromOptions.wrapAround, fromUpdate]);\n\n  // ----------------------------------------------------------------------------\n  // Sync `to`\n  // ----------------------------------------------------------------------------\n\n  const { update: toUpdate, ...toTimescape } = to;\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      digits: toOptions.digits ?? digits,\n    }));\n  }, [digits, toOptions.digits, toUpdate]);\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      hour12: toOptions.hour12 ?? hour12,\n    }));\n  }, [hour12, toOptions.hour12, toUpdate]);\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      maxDate: toOptions.maxDate ?? maxDate,\n    }));\n  }, [maxDate, toOptions.maxDate, toUpdate]);\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      minDate: toOptions.minDate ?? minDate,\n    }));\n  }, [minDate, toOptions.minDate, toUpdate]);\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      snapToStep: toOptions.snapToStep ?? snapToStep,\n    }));\n  }, [snapToStep, toOptions.snapToStep, toUpdate]);\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      wheelControl: toOptions.wheelControl ?? wheelControl,\n    }));\n  }, [wheelControl, toOptions.wheelControl, toUpdate]);\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      wrapAround: toOptions.wrapAround ?? wrapAround,\n    }));\n  }, [wrapAround, toOptions.wrapAround, toUpdate]);\n\n  // ----------------------------------------------------------------------------\n  // Sync `value`\n  // ----------------------------------------------------------------------------\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      date: !value?.from ? undefined : value.from,\n    }));\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      date: !value?.to ? undefined : value.to,\n    }));\n  }, [value, fromUpdate, toUpdate]);\n\n  return {\n    ...timescape,\n    from: fromTimescape,\n    to: toTimescape,\n  };\n};\n",
      "type": "registry:hook"
    }
  ]
}