{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "emoji-picker",
  "type": "registry:ui",
  "title": "Emoji Picker",
  "description": "A emoji picker is a component that allows users to select an emoji from a list of emojis.",
  "dependencies": [
    "@radix-ui/react-toggle-group",
    "frimousse"
  ],
  "registryDependencies": [
    "button",
    "popover"
  ],
  "files": [
    {
      "path": "src/registry/new-york/ui/emoji-picker.tsx",
      "content": "\"use client\";\n\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\";\nimport {\n  type EmojiPickerListCategoryHeaderProps,\n  type EmojiPickerListEmojiProps,\n  type EmojiPickerListRowProps,\n  EmojiPicker as EmojiPickerPrimitive,\n  SkinTone,\n  useActiveEmoji,\n  useSkinTone,\n} from \"frimousse\";\nimport { LoaderIcon, SearchIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nfunction EmojiPicker({\n  className,\n  ...props\n}: React.ComponentProps<typeof EmojiPickerPrimitive.Root>) {\n  return (\n    <EmojiPickerPrimitive.Root\n      data-slot=\"emoji-picker\"\n      className={cn(\n        \"bg-popover text-popover-foreground isolate flex h-full w-fit flex-col overflow-hidden rounded-md\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction EmojiPickerSearch({\n  className,\n  ...props\n}: React.ComponentProps<typeof EmojiPickerPrimitive.Search>) {\n  return (\n    <div\n      data-slot=\"emoji-picker-search-wrapper\"\n      className={cn(\"flex h-9 items-center gap-2 border-b px-3\", className)}\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <EmojiPickerPrimitive.Search\n        data-slot=\"emoji-picker-search\"\n        className=\"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\"\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction EmojiPickerRow({ children, ...props }: EmojiPickerListRowProps) {\n  return (\n    <div data-slot=\"emoji-picker-row\" className=\"scroll-my-1 px-1\" {...props}>\n      {children}\n    </div>\n  );\n}\n\nfunction EmojiPickerEmoji({\n  emoji,\n  className,\n  ...props\n}: EmojiPickerListEmojiProps) {\n  return (\n    <button\n      data-slot=\"emoji-picker-emoji\"\n      className={cn(\n        \"data-[active]:bg-accent flex size-7 items-center justify-center rounded-sm text-base\",\n        className,\n      )}\n      {...props}\n    >\n      {emoji.emoji}\n    </button>\n  );\n}\n\nfunction EmojiPickerCategoryHeader({\n  category,\n  ...props\n}: EmojiPickerListCategoryHeaderProps) {\n  return (\n    <div\n      data-slot=\"emoji-picker-category-header\"\n      className=\"bg-popover text-muted-foreground px-3 pt-3.5 pb-2 text-xs leading-none\"\n      {...props}\n    >\n      {category.label}\n    </div>\n  );\n}\n\nfunction EmojiPickerContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof EmojiPickerPrimitive.Viewport>) {\n  return (\n    <EmojiPickerPrimitive.Viewport\n      data-slot=\"emoji-picker-viewport\"\n      className={cn(\"relative flex-1 outline-hidden\", className)}\n      {...props}\n    >\n      <EmojiPickerPrimitive.Loading\n        data-slot=\"emoji-picker-loading\"\n        className=\"text-muted-foreground absolute inset-0 flex items-center justify-center\"\n      >\n        <LoaderIcon className=\"size-4 animate-spin\" />\n      </EmojiPickerPrimitive.Loading>\n      <EmojiPickerPrimitive.Empty\n        data-slot=\"emoji-picker-empty\"\n        className=\"text-muted-foreground absolute inset-0 flex items-center justify-center text-sm\"\n      >\n        No emoji found.\n      </EmojiPickerPrimitive.Empty>\n      <EmojiPickerPrimitive.List\n        data-slot=\"emoji-picker-list\"\n        className=\"pb-1 select-none\"\n        components={{\n          Row: EmojiPickerRow,\n          Emoji: EmojiPickerEmoji,\n          CategoryHeader: EmojiPickerCategoryHeader,\n        }}\n      />\n    </EmojiPickerPrimitive.Viewport>\n  );\n}\n\nfunction EmojiPickerFooter({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"emoji-picker-footer\"\n      className={cn(\n        \"flex w-full max-w-(--frimousse-viewport-width) min-w-0 items-center justify-between gap-1 border-t p-2\",\n        className,\n      )}\n      {...props}\n    >\n      <EmojiPickerActiveEmojiPreview />\n      <EmojiPickerSkinToneSelector />\n    </div>\n  );\n}\n\nfunction EmojiPickerActiveEmojiPreview({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  const emoji = useActiveEmoji();\n\n  if (!emoji) {\n    return (\n      <div\n        className=\"text-muted-foreground ml-1.5 flex h-7 items-center truncate text-xs\"\n        {...props}\n      >\n        Select an emojiâ€¦\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"flex items-center gap-1\", className)} {...props}>\n      <div className=\"flex items-center gap-1\">\n        <div className=\"flex size-7 flex-none items-center justify-center text-lg\">\n          {emoji.emoji}\n        </div>\n        <span className=\"text-secondary-foreground truncate text-xs\">\n          {emoji.label}\n        </span>\n      </div>\n    </div>\n  );\n}\n\nfunction EmojiPickerSkinToneSelector() {\n  const [skinTone, setSkinTone, skinToneVariations] = useSkinTone();\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\" className=\"size-7\">\n          {\n            skinToneVariations.find(\n              (variation) => variation.skinTone === skinTone,\n            )?.emoji\n          }\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        side=\"left\"\n        align=\"center\"\n        className=\"w-fit overflow-hidden p-0\"\n      >\n        <ToggleGroupPrimitive.Root\n          type=\"single\"\n          value={skinTone}\n          onValueChange={(value) => value && setSkinTone(value as SkinTone)}\n          aria-label=\"Select skin tone\"\n          orientation=\"horizontal\"\n        >\n          {skinToneVariations.map((variation) => (\n            <ToggleGroupPrimitive.Item\n              key={variation.skinTone}\n              aria-label={`${variation.skinTone} skin tone`}\n              value={variation.skinTone}\n              className=\"data-[state=on]:bg-accent data-[state=on]:text-accent-foreground hover:bg-muted focus-visible:ring-ring size-7\"\n            >\n              {variation.emoji}\n            </ToggleGroupPrimitive.Item>\n          ))}\n        </ToggleGroupPrimitive.Root>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nexport {\n  EmojiPicker,\n  EmojiPickerSearch,\n  EmojiPickerContent,\n  EmojiPickerFooter,\n};\n",
      "type": "registry:ui"
    }
  ]
}