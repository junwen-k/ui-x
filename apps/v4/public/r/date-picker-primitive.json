{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-picker-primitive",
  "type": "registry:ui",
  "title": "Date Picker",
  "description": "An unstyled date picker component.",
  "dependencies": [
    "@radix-ui/primitive",
    "@radix-ui/react-popover",
    "@radix-ui/react-primitive",
    "@radix-ui/react-slot",
    "@radix-ui/react-use-controllable-state",
    "date-fns",
    "react-day-picker"
  ],
  "files": [
    {
      "path": "src/registry/new-york/ui/date-picker-primitive.tsx",
      "content": "\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport type * as Radix from \"@radix-ui/react-primitive\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { format } from \"date-fns\";\nimport * as React from \"react\";\nimport {\n  type Mode as DatePickerMode,\n  type DateRange,\n  DayPicker,\n  type DayPickerProps as DayPickerPrimitiveProps,\n} from \"react-day-picker\";\n\nimport * as DateTimeFieldPrimitive from \"@/registry/new-york/ui/date-time-field-primitive\";\nimport * as DateTimeRangeFieldPrimitive from \"@/registry/new-york/ui/date-time-range-field-primitive\";\n\n// TODO: start month / end month sync with calendar and date field\n\nexport type DatePickerContextProps = {\n  formatStr: string;\n  month?: Date;\n  onMonthChange: (month: Date) => void;\n  disabled?: boolean;\n} & (\n  | Required<\n      Pick<\n        DatePickerSingleProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n  | Required<\n      Pick<\n        DatePickerSingleRequiredProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n  | Required<\n      Pick<\n        DatePickerMultipleProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n  | Required<\n      Pick<\n        DatePickerMultipleRequiredProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n  | Required<\n      Pick<\n        DatePickerRangeProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n  | Required<\n      Pick<\n        DatePickerRangeRequiredProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n);\n\nconst DatePickerContext = React.createContext<DatePickerContextProps>({\n  mode: \"single\",\n  formatStr: \"PPP\",\n  month: undefined,\n  onMonthChange: () => {},\n  value: null,\n  onValueChange: () => {},\n  disabled: false,\n  required: false,\n});\n\nfunction useDatePicker() {\n  const context = React.useContext(DatePickerContext);\n  if (!context) {\n    throw new Error(\"useDatePicker must be used within a <DatePicker />.\");\n  }\n\n  return context;\n}\n\nexport interface DatePickerBaseProps\n  extends React.ComponentProps<typeof PopoverPrimitive.Root> {\n  mode?: DatePickerMode | undefined;\n  required?: boolean;\n  formatStr?: string;\n  month?: Date;\n  defaultMonth?: Date;\n  onMonthChange?: (month: Date) => void;\n  disabled?: boolean;\n}\n\nexport type DatePickerValue<T extends DatePickerMode = \"single\"> =\n  T extends \"single\"\n    ? Date\n    : T extends \"multiple\"\n      ? Date[]\n      : T extends \"range\"\n        ? DateRange\n        : never;\n\nexport interface DatePickerSingleProps {\n  mode: \"single\";\n  required?: false | undefined;\n  value?: Date | null;\n  defaultValue?: Date;\n  onValueChange?: (value: Date | null) => void;\n}\n\nexport interface DatePickerSingleRequiredProps {\n  mode: \"single\";\n  required: true;\n  value?: Date;\n  defaultValue?: Date;\n  onValueChange?: (value: Date) => void;\n}\n\nexport interface DatePickerMultipleProps {\n  mode: \"multiple\";\n  required?: false | undefined;\n  value?: Date[] | null;\n  defaultValue?: Date[];\n  onValueChange?: (value: Date[] | null) => void;\n}\n\nexport interface DatePickerMultipleRequiredProps {\n  mode: \"multiple\";\n  required: true;\n  value?: Date[];\n  defaultValue?: Date[];\n  onValueChange?: (value: Date[]) => void;\n}\n\nexport interface DatePickerRangeProps {\n  mode: \"range\";\n  required?: false | undefined;\n  value?: DateRange | null;\n  defaultValue?: DateRange;\n  onValueChange?: (value: DateRange | null) => void;\n}\n\nexport interface DatePickerRangeRequiredProps {\n  mode: \"range\";\n  required: true;\n  value?: DateRange;\n  defaultValue?: DateRange;\n  onValueChange?: (value: DateRange) => void;\n}\n\nexport type DatePickerProps = DatePickerBaseProps &\n  (\n    | DatePickerSingleProps\n    | DatePickerSingleRequiredProps\n    | DatePickerMultipleProps\n    | DatePickerMultipleRequiredProps\n    | DatePickerRangeProps\n    | DatePickerRangeRequiredProps\n  );\n\nfunction DatePicker<T extends DatePickerMode = \"single\">({\n  mode = \"single\" as T,\n  formatStr = \"PPP\",\n  open,\n  onOpenChange,\n  defaultOpen,\n  modal,\n  children,\n  month: monthProp,\n  defaultMonth,\n  onMonthChange,\n  value: valueProp,\n  defaultValue,\n  onValueChange,\n  disabled,\n  required = false,\n}: DatePickerProps) {\n  const [value, setValue] = useControllableState<DatePickerValue<T>>({\n    prop: valueProp as DatePickerValue<T>,\n    defaultProp: defaultValue as DatePickerValue<T>,\n    onChange: onValueChange as (value: DatePickerValue<T>) => void,\n  });\n  const [month, setMonth] = useControllableState({\n    prop: monthProp,\n    defaultProp: defaultMonth ?? new Date(),\n    onChange: onMonthChange,\n  });\n\n  return (\n    <DatePickerContext.Provider\n      value={\n        {\n          mode,\n          required,\n          formatStr,\n          month,\n          onMonthChange: setMonth,\n          value,\n          onValueChange: setValue,\n          disabled,\n        } as DatePickerContextProps\n      }\n    >\n      <PopoverPrimitive.Root\n        data-slot=\"date-picker\"\n        open={open}\n        onOpenChange={onOpenChange}\n        defaultOpen={defaultOpen}\n        modal={modal}\n      >\n        {children}\n      </PopoverPrimitive.Root>\n    </DatePickerContext.Provider>\n  );\n}\n\nfunction DatePickerDateField({\n  disabled: disabledProp,\n  ...props\n}: Omit<\n  React.ComponentProps<typeof DateTimeFieldPrimitive.Root>,\n  \"value\" | \"onValueChange\"\n>) {\n  const { mode, onMonthChange, value, onValueChange, required, disabled } =\n    useDatePicker();\n\n  if (mode !== \"single\") {\n    throw new Error(\n      '<DatePickerDateField> should only be used when mode is \"single\"',\n    );\n  }\n\n  return (\n    <DateTimeFieldPrimitive.Root\n      data-slot=\"date-picker-date-field\"\n      disabled={disabled || disabledProp}\n      value={value}\n      onValueChange={(date) => {\n        if (date) {\n          onValueChange(date);\n          onMonthChange(date);\n        } else if (!required) {\n          onValueChange(null);\n        }\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerDateRangeField({\n  disabled: disabledProp,\n  ...props\n}: Omit<\n  React.ComponentProps<typeof DateTimeRangeFieldPrimitive.Root>,\n  \"value\" | \"onValueChange\"\n>) {\n  const { mode, onMonthChange, value, onValueChange, required, disabled } =\n    useDatePicker();\n\n  if (mode !== \"range\") {\n    throw new Error(\n      '<DatePickerDateRangeField> should only be used when mode is \"range\"',\n    );\n  }\n\n  return (\n    <DateTimeRangeFieldPrimitive.Root\n      data-slot=\"date-picker-date-range-field\"\n      disabled={disabled || disabledProp}\n      value={value}\n      onValueChange={(value) => {\n        if (value) {\n          onValueChange(value);\n          if (value.from) {\n            onMonthChange(value.from);\n          }\n        } else if (!required) {\n          onValueChange(null);\n        }\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerClear({\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Primitive.button>) {\n  const { required, value, onValueChange } = useDatePicker();\n\n  return (\n    <Primitive.button\n      data-slot=\"date-picker-clear\"\n      disabled={required || !value}\n      onClick={composeEventHandlers(\n        onClick,\n        () => !required && onValueChange(null),\n      )}\n      {...props}\n    />\n  );\n}\n\nexport interface DatePickerValueProps\n  extends Radix.PrimitivePropsWithRef<typeof Primitive.span> {\n  placeholder?: React.ReactNode;\n}\n\nfunction DatePickerValue({\n  placeholder,\n  children,\n  ...props\n}: DatePickerValueProps) {\n  const { mode, formatStr, value } = useDatePicker();\n\n  const isValueEmpty = React.useMemo(() => {\n    if (mode === \"single\") {\n      return !value;\n    }\n    if (mode === \"multiple\") {\n      return !value?.length;\n    }\n    return !value?.from;\n  }, [mode, value]);\n\n  const formattedValue = React.useMemo(() => {\n    if (!value) {\n      return null;\n    }\n    if (mode === \"single\") {\n      return format(value, formatStr);\n    }\n    if (mode === \"multiple\") {\n      return value.map((v) => format(v, formatStr)).join(\", \");\n    }\n    return `${value.from ? format(value.from, formatStr) : \"Select a date\"} - ${value.to ? format(value.to, formatStr) : \"Select a date\"}`;\n  }, [mode, value, formatStr]);\n\n  return (\n    <Primitive.span\n      data-slot=\"date-picker-value\"\n      data-placeholder={isValueEmpty ? true : undefined}\n      {...props}\n    >\n      {isValueEmpty ? placeholder : (children ?? formattedValue)}\n    </Primitive.span>\n  );\n}\n\nexport interface DatePickerCalendarProps\n  extends Omit<\n    DayPickerPrimitiveProps,\n    | \"mode\"\n    | \"selected\"\n    | \"onSelect\"\n    | \"month\"\n    | \"onMonthChange\"\n    | \"disabled\"\n    | \"required\"\n  > {\n  asChild?: boolean;\n  children?: React.ReactNode;\n}\n\nfunction DatePickerCalendar({\n  asChild,\n  autoFocus = true,\n  ...props\n}: DatePickerCalendarProps) {\n  const {\n    mode,\n    month,\n    onMonthChange,\n    value,\n    onValueChange,\n    disabled,\n    required,\n  } = useDatePicker();\n\n  const Comp = asChild ? (Slot as typeof DayPicker) : DayPicker;\n\n  return (\n    <Comp\n      data-slot=\"date-picker-calendar\"\n      mode={mode}\n      {...({\n        selected: value === null ? undefined : value,\n        required,\n      } as React.ComponentProps<typeof Comp>)}\n      onSelect={(value: Date | Date[] | DateRange | undefined) => {\n        if (!value && !required) {\n          onValueChange(null);\n        }\n        if (mode === \"single\") {\n          onValueChange(value as Date);\n        }\n        if (mode === \"multiple\") {\n          onValueChange(value as Date[]);\n        }\n        if (mode === \"range\") {\n          onValueChange(value as DateRange);\n        }\n      }}\n      month={month}\n      onMonthChange={onMonthChange}\n      disabled={disabled}\n      autoFocus={autoFocus}\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerTrigger(\n  props: React.ComponentProps<typeof PopoverPrimitive.Trigger>,\n) {\n  return (\n    <PopoverPrimitive.Trigger data-slot=\"date-picker-trigger\" {...props} />\n  );\n}\n\nfunction DatePickerContent(\n  props: React.ComponentProps<typeof PopoverPrimitive.Content>,\n) {\n  return (\n    <PopoverPrimitive.Content data-slot=\"date-picker-content\" {...props} />\n  );\n}\n\nfunction DatePickerPortal(\n  props: React.ComponentProps<typeof PopoverPrimitive.Portal>,\n) {\n  return <PopoverPrimitive.Portal data-slot=\"date-picker-portal\" {...props} />;\n}\n\nfunction DatePickerAnchor(\n  props: React.ComponentProps<typeof PopoverPrimitive.Anchor>,\n) {\n  return <PopoverPrimitive.Anchor data-slot=\"date-picker-anchor\" {...props} />;\n}\n\nfunction DatePickerDateFieldSeparator(\n  props: React.ComponentProps<typeof DateTimeFieldPrimitive.Separator>,\n) {\n  return (\n    <DateTimeFieldPrimitive.Separator\n      data-slot=\"date-picker-date-field-separator\"\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerDateFieldYears(\n  props: React.ComponentProps<typeof DateTimeFieldPrimitive.Years>,\n) {\n  return (\n    <DateTimeFieldPrimitive.Years\n      data-slot=\"date-picker-date-field-years\"\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerDateFieldMonths(\n  props: React.ComponentProps<typeof DateTimeFieldPrimitive.Months>,\n) {\n  return (\n    <DateTimeFieldPrimitive.Months\n      data-slot=\"date-picker-date-field-months\"\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerDateFieldDays(\n  props: React.ComponentProps<typeof DateTimeFieldPrimitive.Days>,\n) {\n  return (\n    <DateTimeFieldPrimitive.Days\n      data-slot=\"date-picker-date-field-days\"\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerDateRangeFieldFrom(\n  props: React.ComponentProps<typeof DateTimeRangeFieldPrimitive.From>,\n) {\n  return (\n    <DateTimeRangeFieldPrimitive.From\n      data-slot=\"date-picker-date-range-field-from\"\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerDateRangeFieldTo(\n  props: React.ComponentProps<typeof DateTimeRangeFieldPrimitive.To>,\n) {\n  return (\n    <DateTimeRangeFieldPrimitive.To\n      data-slot=\"date-picker-date-range-field-to\"\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerDateRangeFieldSeparator(\n  props: React.ComponentProps<typeof DateTimeRangeFieldPrimitive.Separator>,\n) {\n  return (\n    <DateTimeRangeFieldPrimitive.Separator\n      data-slot=\"date-picker-date-range-field-separator\"\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerDateRangeFieldYears(\n  props: React.ComponentProps<typeof DateTimeRangeFieldPrimitive.Years>,\n) {\n  return (\n    <DateTimeRangeFieldPrimitive.Years\n      data-slot=\"date-picker-date-range-field-years\"\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerDateRangeFieldMonths(\n  props: React.ComponentProps<typeof DateTimeRangeFieldPrimitive.Months>,\n) {\n  return (\n    <DateTimeRangeFieldPrimitive.Months\n      data-slot=\"date-picker-date-range-field-months\"\n      {...props}\n    />\n  );\n}\n\nfunction DatePickerDateRangeFieldDays(\n  props: React.ComponentProps<typeof DateTimeRangeFieldPrimitive.Days>,\n) {\n  return (\n    <DateTimeRangeFieldPrimitive.Days\n      data-slot=\"date-picker-date-range-field-days\"\n      {...props}\n    />\n  );\n}\n\nexport {\n  DatePicker as Root,\n  DatePickerDateField as DateField,\n  DatePickerDateFieldSeparator as DateFieldSeparator,\n  DatePickerDateFieldYears as DateFieldYears,\n  DatePickerDateFieldMonths as DateFieldMonths,\n  DatePickerDateFieldDays as DateFieldDays,\n  DatePickerDateRangeField as DateRangeField,\n  DatePickerDateRangeFieldFrom as DateRangeFieldFrom,\n  DatePickerDateRangeFieldTo as DateRangeFieldTo,\n  DatePickerDateRangeFieldSeparator as DateRangeFieldSeparator,\n  DatePickerDateRangeFieldYears as DateRangeFieldYears,\n  DatePickerDateRangeFieldMonths as DateRangeFieldMonths,\n  DatePickerDateRangeFieldDays as DateRangeFieldDays,\n  DatePickerValue as Value,\n  DatePickerClear as Clear,\n  DatePickerTrigger as Trigger,\n  DatePickerAnchor as Anchor,\n  DatePickerPortal as Portal,\n  DatePickerContent as Content,\n  DatePickerCalendar as Calendar,\n  useDatePicker,\n};\n",
      "type": "registry:ui"
    }
  ]
}