{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "badge-group",
  "type": "registry:ui",
  "title": "Badge Group",
  "description": "A badge group is a focusable list of labels, categories, keywords, filters, or other items, with support for keyboard navigation, selection, and removal.",
  "dependencies": [
    "@radix-ui/primitive",
    "@radix-ui/react-slot",
    "@radix-ui/react-toggle-group",
    "@radix-ui/react-use-controllable-state"
  ],
  "files": [
    {
      "path": "src/registry/new-york/ui/badge-group.tsx",
      "content": "\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { Slottable } from \"@radix-ui/react-slot\";\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { X } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { badgeVariants } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\nexport type BadgeGroupContextProps =\n  | {\n      type: \"single\";\n      value: string;\n      onValueChange: (value: string) => void;\n      onRemove?: (value: string) => void;\n    }\n  | {\n      type: \"multiple\";\n      value: string[];\n      onValueChange: (value: string[]) => void;\n      onRemove: (value: string[]) => void;\n    };\n\nconst BadgeGroupContext = React.createContext<BadgeGroupContextProps>({\n  type: \"single\",\n  value: \"\",\n  onValueChange: () => {},\n  onRemove: undefined,\n});\n\nfunction useBadgeGroup() {\n  const context = React.useContext(BadgeGroupContext);\n  if (!context) {\n    throw new Error(\"useBadgeGroup must be used within a BadgeGroup.\");\n  }\n\n  return context;\n}\n\nexport type BadgeGroupType = \"single\" | \"multiple\";\n\nexport type BadgeGroupValue<T extends BadgeGroupType = \"single\"> =\n  T extends \"single\" ? string : T extends \"multiple\" ? string[] : never;\n\nexport type BadgeGroupProps = BadgeGroupSingleProps | BadgeGroupMultipleProps;\n\nexport interface BadgeGroupSingleProps\n  extends ToggleGroupPrimitive.ToggleGroupSingleProps {\n  onRemove?: (value: string) => void;\n}\n\nexport interface BadgeGroupMultipleProps\n  extends ToggleGroupPrimitive.ToggleGroupMultipleProps {\n  onRemove?: (value: string[]) => void;\n}\n\nfunction BadgeGroup<T extends BadgeGroupType = \"single\">({\n  type = \"single\" as T,\n  className,\n  children,\n  onRemove,\n  value: valueProp,\n  defaultValue,\n  onValueChange,\n  ...props\n}: BadgeGroupProps) {\n  const [value, setValue] = useControllableState<BadgeGroupValue<T>>({\n    prop: valueProp as BadgeGroupValue<T>,\n    defaultProp: ((defaultValue ?? type === \"multiple\")\n      ? []\n      : \"\") as BadgeGroupValue<T>,\n    onChange: onValueChange as (value: BadgeGroupValue<T>) => void,\n  });\n\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"badge-group\"\n      className={cn(\"flex gap-2\", className)}\n      {...({\n        type,\n        value,\n        onValueChange: setValue,\n      } as React.ComponentProps<typeof ToggleGroupPrimitive.Root>)}\n      {...props}\n    >\n      <BadgeGroupContext.Provider\n        value={\n          {\n            type,\n            onRemove,\n            value,\n            onValueChange: setValue,\n          } as BadgeGroupContextProps\n        }\n      >\n        <Slottable>{children}</Slottable>\n      </BadgeGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  );\n}\nBadgeGroup.displayName = \"BadgeGroup\";\n\nfunction BadgeGroupItem({\n  value: valueProp,\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item>) {\n  const { type, onRemove, value } = useBadgeGroup();\n\n  return (\n    <BadgeGroupItemImpl\n      data-slot=\"badge-group-item\"\n      value={valueProp}\n      className={cn(\n        badgeVariants({ variant: \"outline\" }),\n        \"data-[state=on]:bg-primary data-[state=on]:text-primary-foreground data-[state=on]:[a&]:hover:bg-primary/90 data-[state=on]:border-transparent\",\n        \"disabled:pointer-events-none disabled:opacity-50\",\n        className,\n      )}\n      onRemove={\n        onRemove &&\n        ((_, reason) => {\n          if (reason === \"closeClick\") {\n            if (type === \"single\") {\n              onRemove(valueProp);\n            }\n            if (type === \"multiple\") {\n              onRemove([valueProp]);\n            }\n          } else {\n            if (type === \"single\") {\n              onRemove?.(valueProp);\n            }\n            if (type === \"multiple\") {\n              onRemove?.(value.includes(valueProp) ? value : [valueProp]);\n            }\n          }\n        })\n      }\n      {...props}\n    />\n  );\n}\n\ninterface BadgeGroupItemImplProps\n  extends React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> {\n  onRemove?: (\n    event: React.MouseEvent | React.KeyboardEvent,\n    reason: \"closeClick\" | \"backspaceKeyDown\" | \"deleteKeyDown\",\n  ) => void;\n}\n\nfunction BadgeGroupItemImpl({\n  onRemove,\n  onKeyDown,\n  children,\n  ...props\n}: BadgeGroupItemImplProps) {\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"badge-group-item-impl\"\n      onKeyDown={composeEventHandlers(onKeyDown, (event) => {\n        if (event.key === \"Backspace\" || event.key === \"Delete\") {\n          onRemove?.(\n            event,\n            event.key === \"Backspace\" ? \"backspaceKeyDown\" : \"deleteKeyDown\",\n          );\n        }\n      })}\n      {...props}\n    >\n      <Slottable>{children}</Slottable>\n      {onRemove && (\n        <div\n          aria-hidden\n          onClick={(event) => {\n            event.stopPropagation();\n            onRemove(event, \"closeClick\");\n          }}\n          className=\"cursor-pointer rounded-sm opacity-70 transition-opacity group-data-[disabled]:pointer-events-none hover:opacity-100\"\n        >\n          <X className=\"size-4\" />\n          <span className=\"sr-only\">Remove</span>\n        </div>\n      )}\n    </ToggleGroupPrimitive.Item>\n  );\n}\n\nexport { BadgeGroup, BadgeGroupItem };\n",
      "type": "registry:ui"
    }
  ]
}