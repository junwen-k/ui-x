{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "phone-input-primitive",
  "type": "registry:ui",
  "title": "Phone Input Primitive",
  "description": "Phone Input allows user to enter phone number in E.164 format.",
  "dependencies": [
    "@radix-ui/react-use-controllable-state@1.2.2",
    "react-phone-number-input"
  ],
  "files": [
    {
      "path": "src/registry/new-york/ui/phone-input-primitive.tsx",
      "content": "\"use client\";\n\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport * as React from \"react\";\nimport {\n  Country,\n  default as ReactPhoneInput,\n  Value,\n  getCountries,\n  getCountryCallingCode,\n} from \"react-phone-number-input/input\";\n\nexport interface PhoneInputBaseProps {\n  value?: Value;\n  defaultValue?: Value;\n  onValueChange?: (value: Value) => void;\n  country?: Country | null;\n  defaultCountry?: Country;\n  onCountryChange?: (country: Country | null) => void;\n  children?: React.ReactNode;\n  disabled?: boolean;\n}\n\nexport interface PhoneInputWithoutInternationalProps\n  extends PhoneInputBaseProps {\n  international?: false;\n  withCountryCallingCode?: never;\n}\n\nexport interface PhoneInputWithInternationalProps extends PhoneInputBaseProps {\n  /**\n   * Forces international format when a country is explicitly selected.\n   *\n   * @warning This prop only takes effect when a country is explicitly selected.\n   *\n   * By default, the component uses national format when a country is selected and international format\n   * when no country is selected.\n   */\n  international: true;\n  /**\n   * Controls the display of country calling code in international format.\n   *\n   * @warning This prop only affects the display when international format is active and a country is explicitly selected.\n   *\n   * By default, the country calling code is omitted when the country is known. Use this prop when you want to ensure\n   * the country calling code is always visible and undeletable, even when the country is already selected.\n   *\n   * For example, setting this to true will always show \"+1\" for US numbers, even when US is selected.\n   */\n  withCountryCallingCode?: boolean;\n}\n\nexport interface PhoneInputWithoutPreferredCountryProps\n  extends PhoneInputBaseProps {\n  preferredCountry?: never;\n  defaultInternationalForPreferredCountry?: never;\n}\n\nexport interface PhoneInputWithPreferredCountryProps\n  extends PhoneInputBaseProps {\n  /**\n   * Suggests a default country while maintaining flexibility for international numbers.\n   * This prop acts as a smart fallback when no country is selected.\n   *\n   * This is useful when you have a strong indication of the user's country (e.g., building a sign up form for a local business)\n   * but want to maintain flexibility for international numbers. When specified, users can enter numbers\n   * in national format for this country while still being able to enter international numbers for any country.\n   *\n   * @description Maps to the `defaultCountry={preferredCountry}` prop in `react-phone-number-input`.\n   */\n  preferredCountry: Country;\n  /**\n   * Controls the initial format of value matching the preferred country.\n   *\n   * By default, when the initial value matches the preferred country, it will be formatted in national format.\n   * Use this prop to force international format even for numbers matching the preferred country.\n   *\n   * @description Maps to `useNationalFormatForDefaultCountryValue={!defaultInternationalForPreferredCountry}` prop in `react-phone-number-input`.\n   */\n  defaultInternationalForPreferredCountry?: boolean;\n}\n\nexport type PhoneInputProps = (\n  | PhoneInputWithoutInternationalProps\n  | PhoneInputWithInternationalProps\n) &\n  (\n    | PhoneInputWithoutPreferredCountryProps\n    | PhoneInputWithPreferredCountryProps\n  );\n\ninterface PhoneInputContextProps {\n  value: Value;\n  onValueChange: (value: Value) => void;\n  country: Country | null;\n  onCountryChange: (country: Country | null) => void;\n  preferredCountry: Country | undefined;\n  defaultInternationalForPreferredCountry: boolean;\n  international: boolean;\n  withCountryCallingCode: boolean;\n  disabled?: boolean;\n}\n\nexport const PhoneInputContext = React.createContext<PhoneInputContextProps>({\n  value: \"\" as Value,\n  onValueChange: () => {},\n  country: null,\n  onCountryChange: () => {},\n  preferredCountry: undefined,\n  defaultInternationalForPreferredCountry: false,\n  international: false,\n  withCountryCallingCode: false,\n  disabled: false,\n});\n\nfunction usePhoneInput() {\n  const context = React.useContext(PhoneInputContext);\n  if (!context) {\n    throw new Error(\"usePhoneInput must be used within a <PhoneInput />.\");\n  }\n\n  return context;\n}\n\nfunction PhoneInput({\n  value: valueProp,\n  defaultValue,\n  onValueChange,\n  country: countryProp,\n  defaultCountry,\n  onCountryChange,\n  preferredCountry,\n  defaultInternationalForPreferredCountry = false,\n  international = false,\n  withCountryCallingCode = false,\n  disabled = false,\n  children,\n}: PhoneInputProps) {\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: (defaultValue ?? \"\") as Value,\n    onChange: onValueChange,\n  });\n  const [country, setCountry] = useControllableState({\n    prop: countryProp,\n    defaultProp: defaultCountry ?? null,\n    onChange: onCountryChange,\n  });\n\n  return (\n    <PhoneInputContext.Provider\n      data-slot=\"phone-input\"\n      value={{\n        value,\n        onValueChange: setValue,\n        country,\n        onCountryChange: setCountry,\n        preferredCountry,\n        defaultInternationalForPreferredCountry,\n        international,\n        withCountryCallingCode,\n        disabled,\n      }}\n    >\n      {children}\n    </PhoneInputContext.Provider>\n  );\n}\n\ninterface PhoneInputInputProps\n  extends Omit<\n    React.ComponentProps<typeof ReactPhoneInput>,\n    | \"value\"\n    | \"onChange\"\n    | \"inputComponent\"\n    | \"international\"\n    | \"withCountryCallingCode\"\n    | \"useNationalFormatForDefaultCountryValue\"\n  > {\n  asChild?: boolean;\n  children?: React.ReactNode;\n  smartCaret?: boolean;\n}\n\nfunction getInputComponent(children: React.ReactNode) {\n  const child = React.Children.only(children);\n  if (!React.isValidElement(child)) {\n    return undefined;\n  }\n\n  return (props: React.ComponentProps<\"input\">) =>\n    React.cloneElement(child, {\n      ...props,\n      ...(child.props as React.ComponentProps<\"input\">),\n    });\n}\n\nfunction PhoneInputInput({\n  asChild,\n  children,\n  disabled: disabledProp,\n  ...props\n}: PhoneInputInputProps) {\n  const {\n    value,\n    onValueChange,\n    country,\n    preferredCountry,\n    defaultInternationalForPreferredCountry,\n    international,\n    withCountryCallingCode,\n    disabled,\n  } = usePhoneInput();\n\n  const inputComponent = React.useMemo(\n    () => (asChild ? getInputComponent(children) : undefined),\n    [asChild, children],\n  );\n\n  // This is a workaround to prevent infinite rerenders. For more information, see:\n  // https://github.com/catamphetamine/react-phone-number-input/issues/441.\n  const handleChange = React.useCallback(\n    (v: Value) => {\n      setTimeout(() => onValueChange?.(v ?? (\"\" as Value)));\n    },\n    [onValueChange],\n  );\n\n  return (\n    <ReactPhoneInput\n      data-slot=\"phone-input-input\"\n      inputComponent={inputComponent}\n      country={country ?? undefined}\n      {...(!country && { defaultCountry: preferredCountry })}\n      useNationalFormatForDefaultCountryValue={\n        !defaultInternationalForPreferredCountry\n      }\n      {...(country && { international })}\n      {...(international && { withCountryCallingCode })}\n      value={value}\n      onChange={handleChange}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nconst INTERNATIONAL_COUNTRY_CODE = \"international\";\n\nfunction PhoneInputCountrySelect({\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<\"select\">) {\n  const { country, onCountryChange, disabled } = usePhoneInput();\n\n  return (\n    <select\n      data-slot=\"phone-input-country-select\"\n      value={country ?? \"\"}\n      disabled={disabled || disabledProp}\n      onChange={(event) =>\n        onCountryChange(\n          event.target.value === INTERNATIONAL_COUNTRY_CODE\n            ? null\n            : (event.target.value as Country),\n        )\n      }\n      {...props}\n    />\n  );\n}\n\nfunction PhoneInputCountrySelectOption(props: React.ComponentProps<\"option\">) {\n  return <option data-slot=\"phone-input-country-select-option\" {...props} />;\n}\n\nfunction PhoneInputCountryInternationalSelectOption({\n  ...props\n}: Omit<React.ComponentProps<\"option\">, \"value\">) {\n  return (\n    <PhoneInputCountrySelectOption\n      value={INTERNATIONAL_COUNTRY_CODE}\n      {...props}\n    />\n  );\n}\n\nfunction getCountryOptions() {\n  return getCountries().map((countryCode) => ({\n    countryCode,\n    countryCallingCode: getCountryCallingCode(countryCode),\n  }));\n}\n\nexport {\n  PhoneInput as Root,\n  PhoneInputInput as Input,\n  PhoneInputCountrySelect as CountrySelect,\n  PhoneInputCountrySelectOption as CountrySelectOption,\n  PhoneInputCountryInternationalSelectOption as CountryInternationalSelectOption,\n  getCountryOptions,\n  type Country,\n  type Value,\n  usePhoneInput,\n  INTERNATIONAL_COUNTRY_CODE,\n};\n",
      "type": "registry:ui"
    }
  ]
}