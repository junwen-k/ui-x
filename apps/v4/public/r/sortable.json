{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sortable",
  "type": "registry:ui",
  "title": "Sortable",
  "description": "Sortable provides a way to sort items in a list or grid.",
  "dependencies": [
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities",
    "@radix-ui/primitive@1.1.2",
    "@radix-ui/react-compose-refs@1.1.2",
    "@radix-ui/react-portal",
    "@radix-ui/react-primitive@2.1.2"
  ],
  "files": [
    {
      "path": "src/registry/new-york/ui/sortable.tsx",
      "content": "\"use client\";\n\nimport type {\n  DndContextProps,\n  DragCancelEvent,\n  DragEndEvent,\n  DragStartEvent,\n  UniqueIdentifier,\n} from \"@dnd-kit/core\";\nimport {\n  DndContext,\n  DragOverlay,\n  KeyboardSensor,\n  PointerSensor,\n  closestCenter,\n  useSensor,\n  useSensors,\n} from \"@dnd-kit/core\";\nimport {\n  NewIndexGetter,\n  SortableContext,\n  SortableContextProps,\n  horizontalListSortingStrategy,\n  sortableKeyboardCoordinates,\n  useSortable as useDndSortable,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { CSS, Transform } from \"@dnd-kit/utilities\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport * as PortalPrimitive from \"@radix-ui/react-portal\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst SortableImplContext = React.createContext<\n  Pick<SortableProps, \"getNewIndex\"> &\n    Required<Pick<SortableProps, \"getTransformStyle\">> & {\n      activeId: UniqueIdentifier | null;\n    }\n>({\n  activeId: null,\n  getTransformStyle: CSS.Transform.toString,\n});\n\nfunction useSortable() {\n  const context = React.useContext(SortableImplContext);\n  if (!context) {\n    throw new Error(\"useSortable must be used within a <Sortable />.\");\n  }\n\n  return context;\n}\n\nexport interface SortableProps extends DndContextProps {\n  onReorder?: (oldIndex: number, newIndex: number) => void;\n  getNewIndex?: NewIndexGetter;\n  getTransformStyle?: (\n    transform: Transform | null,\n  ) => React.CSSProperties[\"transform\"];\n}\n\nfunction Sortable({\n  onDragStart,\n  onDragEnd,\n  onDragCancel,\n  getNewIndex,\n  collisionDetection = closestCenter,\n  getTransformStyle = CSS.Transform.toString,\n  ...props\n}: SortableProps) {\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier | null>(null);\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  return (\n    <SortableImplContext.Provider\n      value={{\n        activeId,\n        getTransformStyle,\n        getNewIndex,\n      }}\n    >\n      <DndContext\n        data-slot=\"sortable\"\n        onDragStart={composeEventHandlers<\n          DragStartEvent & { defaultPrevented: boolean }\n        >(onDragStart, ({ active }) => setActiveId(active.id))}\n        onDragEnd={composeEventHandlers<\n          DragEndEvent & { defaultPrevented: boolean }\n        >(onDragEnd, () => setActiveId(null))}\n        onDragCancel={composeEventHandlers<\n          DragCancelEvent & { defaultPrevented: boolean }\n        >(onDragCancel, () => setActiveId(null))}\n        collisionDetection={collisionDetection}\n        sensors={sensors}\n        {...props}\n      />\n    </SortableImplContext.Provider>\n  );\n}\n\nexport interface SortableListProps\n  extends Omit<SortableContextProps, \"children\">,\n    React.ComponentProps<typeof Primitive.ul> {\n  orientation?: \"vertical\" | \"horizontal\";\n}\n\nfunction SortableList({\n  orientation = \"vertical\",\n  strategy = orientation === \"vertical\"\n    ? verticalListSortingStrategy\n    : horizontalListSortingStrategy,\n  items,\n  disabled,\n  id,\n  ref,\n  ...props\n}: SortableListProps) {\n  return (\n    <SortableContext\n      strategy={strategy}\n      items={items}\n      disabled={disabled}\n      id={id}\n    >\n      <Primitive.ul\n        data-slot=\"sortable-list\"\n        ref={ref}\n        data-orientation={orientation}\n        {...props}\n      />\n    </SortableContext>\n  );\n}\n\nexport type SortableGridProps = Omit<SortableContextProps, \"children\"> &\n  React.ComponentProps<typeof Primitive.div>;\n\nfunction SortableGrid({\n  strategy,\n  items,\n  disabled,\n  id,\n  ref,\n  ...props\n}: SortableGridProps) {\n  return (\n    <SortableContext\n      strategy={strategy}\n      items={items}\n      disabled={disabled}\n      id={id}\n    >\n      <Primitive.div data-slot=\"sortable-grid\" ref={ref} {...props} />\n    </SortableContext>\n  );\n}\n\nconst SortableItemContext = React.createContext<\n  Pick<SortableItemProps, \"id\" | \"disabled\">\n>({\n  id: \"\",\n  disabled: false,\n});\n\nfunction useSortableItem() {\n  const context = React.useContext(SortableItemContext);\n  if (!context) {\n    throw new Error(\"useSortableItem must be used within a <SortableItem />.\");\n  }\n\n  return context;\n}\n\nexport type SortableItemProps = Omit<\n  React.ComponentProps<typeof Primitive.div>,\n  \"id\"\n> &\n  Pick<Parameters<typeof useDndSortable>[0], \"id\" | \"disabled\">;\n\nfunction SortableItem({\n  id,\n  disabled,\n  style: styleProp,\n  ref,\n  ...props\n}: SortableItemProps) {\n  const { getTransformStyle, getNewIndex } = useSortable();\n  const {\n    attributes,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n    isOver,\n    isSorting,\n  } = useDndSortable({\n    id,\n    disabled,\n    getNewIndex,\n  });\n\n  const composedRefs = useComposedRefs(\n    setNodeRef as React.RefCallback<HTMLDivElement>,\n    ref,\n  );\n  const style = {\n    transform: getTransformStyle(transform),\n    transition,\n    ...styleProp,\n  };\n\n  return (\n    <SortableItemContext.Provider value={{ id, disabled }}>\n      <Primitive.div\n        data-slot=\"sortable-item\"\n        ref={composedRefs}\n        style={style}\n        data-dragging={isDragging || undefined}\n        data-over={isOver || undefined}\n        data-sorting={isSorting || undefined}\n        {...attributes}\n        {...props}\n      />\n    </SortableItemContext.Provider>\n  );\n}\n\nfunction SortableItemTrigger({\n  className,\n  disabled: disabledProp,\n  ref,\n  ...props\n}: React.ComponentProps<typeof Primitive.button>) {\n  const { getNewIndex } = useSortable();\n  const { id, disabled } = useSortableItem();\n  const { listeners, setActivatorNodeRef, isDragging, isOver, isSorting } =\n    useDndSortable({\n      id,\n      disabled: disabledProp || disabled,\n      getNewIndex,\n    });\n\n  const composedRefs = useComposedRefs(\n    setActivatorNodeRef as React.RefCallback<HTMLButtonElement>,\n    ref,\n  );\n\n  return (\n    <Primitive.button\n      data-slot=\"sortable-item-trigger\"\n      ref={composedRefs}\n      data-dragging={isDragging || undefined}\n      data-over={isOver || undefined}\n      data-sorting={isSorting || undefined}\n      disabled={disabledProp}\n      className={cn(\"touch-none\", className)}\n      {...listeners}\n      {...props}\n    />\n  );\n}\n\nexport interface SortableOverlayProps\n  extends Omit<React.ComponentProps<typeof DragOverlay>, \"children\"> {\n  children?: React.ReactNode | ((id: UniqueIdentifier) => React.ReactNode);\n}\n\nfunction SortableOverlay({ children, ...props }: SortableOverlayProps) {\n  const { activeId } = useSortable();\n\n  return (\n    <PortalPrimitive.Root>\n      <DragOverlay data-slot=\"sortable-overlay\" {...props}>\n        {activeId &&\n          (typeof children === \"function\" ? children(activeId) : children)}\n      </DragOverlay>\n    </PortalPrimitive.Root>\n  );\n}\n\nexport {\n  Sortable,\n  SortableList,\n  SortableGrid,\n  SortableItem,\n  SortableItemTrigger,\n  SortableOverlay,\n};\n",
      "type": "registry:ui"
    }
  ]
}