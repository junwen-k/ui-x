{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropzone-primitive",
  "type": "registry:ui",
  "title": "Dropzone Primitive",
  "description": "A dropzone is an area into which one or multiple objects can be dragged and dropped.",
  "dependencies": [
    "@radix-ui/primitive@1.1.2",
    "@radix-ui/react-primitive@2.1.2",
    "react-dropzone"
  ],
  "files": [
    {
      "path": "src/registry/new-york/ui/dropzone-primitive.tsx",
      "content": "\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as React from \"react\";\nimport {\n  type DropzoneOptions,\n  type DropzoneState,\n  FileRejection,\n  FileWithPath,\n  useDropzone as useReactDropzone,\n} from \"react-dropzone\";\n\nexport type DropzoneContextProps = DropzoneState & DropzoneOptions;\n\nconst DropzoneContext = React.createContext<DropzoneContextProps>(\n  {} as DropzoneContextProps,\n);\n\nfunction useDropzone() {\n  const context = React.useContext(DropzoneContext);\n  if (!context) {\n    throw new Error(\"useDropzone must be used within a <Dropzone />.\");\n  }\n\n  return context;\n}\n\nexport interface DropzoneProps extends DropzoneOptions {\n  children:\n    | React.ReactNode\n    | ((state: DropzoneContextProps) => React.ReactNode);\n}\n\nfunction Dropzone({ children, ...props }: DropzoneProps) {\n  const state = useReactDropzone(props);\n  const context = { ...state, ...props };\n\n  return (\n    <DropzoneContext.Provider value={context}>\n      {typeof children === \"function\" ? children(context) : children}\n    </DropzoneContext.Provider>\n  );\n}\n\nfunction DropzoneInput(props: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDropzone();\n\n  return (\n    <Primitive.input\n      data-slot=\"dropzone-input\"\n      {...getInputProps({ disabled, ...props })}\n    />\n  );\n}\n\nfunction DropzoneZone(props: React.ComponentProps<typeof Primitive.div>) {\n  const {\n    getRootProps,\n    isFocused,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n    isFileDialogActive,\n    preventDropOnDocument,\n    noClick,\n    noKeyboard,\n    noDrag,\n    noDragEventsBubbling,\n    disabled,\n  } = useDropzone();\n\n  return (\n    <Primitive.div\n      data-slot=\"dropzone-zone\"\n      data-prevent-drop-on-document={preventDropOnDocument || undefined}\n      data-no-click={noClick || undefined}\n      data-no-keyboard={noKeyboard || undefined}\n      data-no-drag={noDrag || undefined}\n      data-no-drag-events-bubbling={noDragEventsBubbling || undefined}\n      data-disabled={disabled || undefined}\n      data-focused={isFocused || undefined}\n      data-drag-active={isDragActive || undefined}\n      data-drag-accept={isDragAccept || undefined}\n      data-drag-reject={isDragReject || undefined}\n      data-file-dialog-active={isFileDialogActive || undefined}\n      {...getRootProps(props)}\n    />\n  );\n}\n\nfunction DropzoneTrigger({\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Primitive.button>) {\n  const { open } = useDropzone();\n\n  return (\n    <Primitive.button\n      data-slot=\"dropzone-trigger\"\n      onClick={composeEventHandlers(onClick, open)}\n      {...props}\n    />\n  );\n}\n\nexport interface DropzoneDragAcceptedProps {\n  children?: React.ReactNode;\n}\n\nfunction DropzoneDragAccepted({ children }: DropzoneDragAcceptedProps) {\n  const { isDragAccept } = useDropzone();\n  if (!isDragAccept) return null;\n  return <div data-slot=\"dropzone-drag-accepted\">{children}</div>;\n}\n\nexport interface DropzoneDragRejectedProps {\n  children?: React.ReactNode;\n}\n\nfunction DropzoneDragRejected({ children }: DropzoneDragRejectedProps) {\n  const { isDragReject } = useDropzone();\n  if (!isDragReject) {\n    return null;\n  }\n\n  return <div data-slot=\"dropzone-drag-rejected\">{children}</div>;\n}\n\nexport interface DropzoneDragDefaultProps {\n  children?: React.ReactNode;\n}\n\nfunction DropzoneDragDefault({ children }: DropzoneDragDefaultProps) {\n  const { isDragActive } = useDropzone();\n  if (isDragActive) {\n    return null;\n  }\n\n  return <div data-slot=\"dropzone-drag-default\">{children}</div>;\n}\n\nexport interface DropzoneAcceptedProps {\n  children: (acceptedFiles: Readonly<FileWithPath[]>) => React.ReactNode;\n}\n\nfunction DropzoneAccepted({ children }: DropzoneAcceptedProps) {\n  const { acceptedFiles } = useDropzone();\n  return <div data-slot=\"dropzone-accepted\">{children(acceptedFiles)}</div>;\n}\n\nexport interface DropzoneRejectedProps {\n  children: (fileRejections: Readonly<FileRejection[]>) => React.ReactNode;\n}\n\nfunction DropzoneRejected({ children }: DropzoneRejectedProps) {\n  const { fileRejections } = useDropzone();\n  return <div data-slot=\"dropzone-rejected\">{children(fileRejections)}</div>;\n}\n\nexport {\n  Dropzone as Root,\n  DropzoneInput as Input,\n  DropzoneZone as Zone,\n  DropzoneTrigger as Trigger,\n  DropzoneDragAccepted as DragAccepted,\n  DropzoneDragRejected as DragRejected,\n  DropzoneDragDefault as DragDefault,\n  DropzoneAccepted as Accepted,\n  DropzoneRejected as Rejected,\n};\n",
      "type": "registry:ui"
    }
  ]
}