{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox-primitive",
  "type": "registry:ui",
  "title": "Combobox Primitive",
  "description": "An unstyled combobox component. Input field with autocomplete & autosuggest functionalities.",
  "dependencies": [
    "@radix-ui/primitive@1.1.2",
    "@radix-ui/react-compose-refs@1.1.2",
    "@radix-ui/react-popover",
    "@radix-ui/react-primitive@2.1.2",
    "@radix-ui/react-roving-focus@1.1.9",
    "@radix-ui/react-use-controllable-state@1.2.2",
    "cmdk"
  ],
  "files": [
    {
      "path": "src/registry/new-york/ui/combobox-primitive.tsx",
      "content": "\"use client\";\n\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as RovingFocusGroupPrimitive from \"@radix-ui/react-roving-focus\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport * as React from \"react\";\n\nexport type ComboboxContextProps = {\n  inputValue: string;\n  onInputValueChange: (\n    inputValue: string,\n    reason: \"inputChange\" | \"itemSelect\" | \"clearClick\",\n  ) => void;\n  onInputBlur?: (e: React.FocusEvent<HTMLInputElement, Element>) => void;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  currentTabStopId: string | null;\n  onCurrentTabStopIdChange: (currentTabStopId: string | null) => void;\n  inputRef: React.RefObject<HTMLInputElement | null>;\n  tagGroupRef: React.RefObject<React.ComponentRef<\n    typeof RovingFocusGroupPrimitive.Root\n  > | null>;\n  disabled?: boolean;\n  required?: boolean;\n} & (\n  | Required<Pick<ComboboxSingleProps, \"type\" | \"value\" | \"onValueChange\">>\n  | Required<Pick<ComboboxMultipleProps, \"type\" | \"value\" | \"onValueChange\">>\n);\n\nconst ComboboxContext = React.createContext<ComboboxContextProps>({\n  type: \"single\",\n  value: \"\",\n  onValueChange: () => {},\n  inputValue: \"\",\n  onInputValueChange: () => {},\n  onInputBlur: () => {},\n  open: false,\n  onOpenChange: () => {},\n  currentTabStopId: null,\n  onCurrentTabStopIdChange: () => {},\n  inputRef: { current: null },\n  tagGroupRef: { current: null },\n  disabled: false,\n  required: false,\n});\n\nfunction useCombobox() {\n  const context = React.useContext(ComboboxContext);\n  if (!context) {\n    throw new Error(\"useCombobox must be used within a <Combobox />.\");\n  }\n\n  return context;\n}\n\nexport type ComboboxType = \"single\" | \"multiple\";\n\nexport interface ComboboxBaseProps\n  extends React.ComponentProps<typeof PopoverPrimitive.Root>,\n    Omit<\n      React.ComponentProps<typeof CommandPrimitive>,\n      \"value\" | \"defaultValue\" | \"onValueChange\"\n    > {\n  type?: ComboboxType | undefined;\n  inputValue?: string;\n  defaultInputValue?: string;\n  onInputValueChange?: (\n    inputValue: string,\n    reason: \"inputChange\" | \"itemSelect\" | \"clearClick\",\n  ) => void;\n  onInputBlur?: (e: React.FocusEvent<HTMLInputElement, Element>) => void;\n  disabled?: boolean;\n  required?: boolean;\n}\n\nexport type ComboboxValue<T extends ComboboxType = \"single\"> =\n  T extends \"single\" ? string : T extends \"multiple\" ? string[] : never;\n\nexport interface ComboboxSingleProps {\n  type: \"single\";\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n}\n\nexport interface ComboboxMultipleProps {\n  type: \"multiple\";\n  value?: string[];\n  defaultValue?: string[];\n  onValueChange?: (value: string[]) => void;\n}\n\nexport type ComboboxProps = ComboboxBaseProps &\n  (ComboboxSingleProps | ComboboxMultipleProps);\n\nfunction Combobox<T extends ComboboxType = \"single\">({\n  type = \"single\" as T,\n  open: openProp,\n  onOpenChange,\n  defaultOpen,\n  modal,\n  children,\n  value: valueProp,\n  defaultValue,\n  onValueChange,\n  inputValue: inputValueProp,\n  defaultInputValue,\n  onInputValueChange,\n  onInputBlur,\n  disabled,\n  required,\n  ...props\n}: ComboboxProps) {\n  const [value, setValue] = useControllableState<ComboboxValue<T>>({\n    prop: valueProp as ComboboxValue<T>,\n    defaultProp: ((defaultValue ?? type === \"multiple\")\n      ? []\n      : \"\") as ComboboxValue<T>,\n    onChange: onValueChange as (value: ComboboxValue<T>) => void,\n  });\n\n  const [inputValue, setInputValue] = useControllableState({\n    prop: inputValueProp,\n    defaultProp: defaultInputValue ?? \"\",\n  });\n\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n  });\n\n  const [currentTabStopId, setCurrentTabStopId] = React.useState<string | null>(\n    null,\n  );\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const tagGroupRef =\n    React.useRef<React.ComponentRef<typeof RovingFocusGroupPrimitive.Root>>(\n      null,\n    );\n\n  const handleInputValueChange: ComboboxContextProps[\"onInputValueChange\"] =\n    React.useCallback(\n      (inputValue, reason) => {\n        setInputValue(inputValue);\n        onInputValueChange?.(inputValue, reason);\n      },\n      [setInputValue, onInputValueChange],\n    );\n\n  return (\n    <ComboboxContext.Provider\n      value={\n        {\n          type,\n          value,\n          onValueChange: setValue,\n          inputValue,\n          onInputValueChange: handleInputValueChange,\n          onInputBlur,\n          open,\n          onOpenChange: setOpen,\n          currentTabStopId,\n          onCurrentTabStopIdChange: setCurrentTabStopId,\n          inputRef,\n          tagGroupRef,\n          disabled,\n          required,\n        } as ComboboxContextProps\n      }\n    >\n      <PopoverPrimitive.Root open={open} onOpenChange={setOpen} modal={modal}>\n        <CommandPrimitive data-slot=\"combobox\" {...props}>\n          {children}\n          {!open && <CommandPrimitive.List aria-hidden hidden />}\n        </CommandPrimitive>\n      </PopoverPrimitive.Root>\n    </ComboboxContext.Provider>\n  );\n}\n\nfunction ComboboxTagGroup({\n  ref,\n  ...props\n}: React.ComponentProps<typeof RovingFocusGroupPrimitive.Root>) {\n  const { currentTabStopId, onCurrentTabStopIdChange, tagGroupRef, type } =\n    useCombobox();\n\n  if (type !== \"multiple\") {\n    throw new Error(\n      '<ComboboxTagGroup> should only be used when type is \"multiple\"',\n    );\n  }\n\n  const composedRefs = useComposedRefs(ref, tagGroupRef);\n\n  return (\n    <RovingFocusGroupPrimitive.Root\n      data-slot=\"combobox-tag-group\"\n      ref={composedRefs}\n      tabIndex={-1}\n      currentTabStopId={currentTabStopId}\n      onCurrentTabStopIdChange={onCurrentTabStopIdChange}\n      onBlur={() => onCurrentTabStopIdChange(null)}\n      {...props}\n    />\n  );\n}\n\nexport interface ComboboxTagGroupItemProps\n  extends Omit<\n    React.ComponentProps<typeof RovingFocusGroupPrimitive.Item>,\n    \"children\"\n  > {\n  children?: React.ReactNode;\n  value: string;\n  disabled?: boolean;\n}\n\nconst ComboboxTagGroupItemContext = React.createContext<\n  Pick<ComboboxTagGroupItemProps, \"value\" | \"disabled\">\n>({\n  value: \"\",\n  disabled: false,\n});\n\nfunction useComboboxTagGroupItem() {\n  const context = React.useContext(ComboboxTagGroupItemContext);\n  if (!context) {\n    throw new Error(\n      \"<ComboboxTagGroupItemContext> should only be used within a <ComboboxTagGroupItem />.\",\n    );\n  }\n\n  return context;\n}\n\nfunction ComboboxTagGroupItem({\n  onClick,\n  onKeyDown,\n  value: valueProp,\n  disabled,\n  ...props\n}: ComboboxTagGroupItemProps) {\n  const { value, onValueChange, inputRef, currentTabStopId, type } =\n    useCombobox();\n\n  if (type !== \"multiple\") {\n    throw new Error(\n      '<ComboboxTagGroupItem> should only be used when type is \"multiple\"',\n    );\n  }\n\n  const lastItemValue = value.at(-1);\n\n  return (\n    <ComboboxTagGroupItemContext.Provider\n      value={{ value: valueProp, disabled }}\n    >\n      <RovingFocusGroupPrimitive.Item\n        data-slot=\"combobox-tag-group-item\"\n        onKeyDown={composeEventHandlers(onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            inputRef.current?.focus();\n          }\n          if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n            event.preventDefault();\n            inputRef.current?.focus();\n          }\n          if (\n            event.key === \"ArrowRight\" &&\n            currentTabStopId === lastItemValue\n          ) {\n            inputRef.current?.focus();\n          }\n          if (event.key === \"Backspace\" || event.key === \"Delete\") {\n            onValueChange(value.filter((v) => v !== currentTabStopId));\n            inputRef.current?.focus();\n          }\n        })}\n        onClick={composeEventHandlers(\n          onClick,\n          () => disabled && inputRef.current?.focus(),\n        )}\n        tabStopId={valueProp}\n        focusable={!disabled}\n        data-disabled={disabled}\n        active={valueProp === lastItemValue}\n        {...props}\n      />\n    </ComboboxTagGroupItemContext.Provider>\n  );\n}\n\nfunction ComboboxTagGroupItemRemove({\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Primitive.button>) {\n  const { value, onValueChange, type } = useCombobox();\n\n  if (type !== \"multiple\") {\n    throw new Error(\n      '<ComboboxTagGroupItemRemove> should only be used when type is \"multiple\"',\n    );\n  }\n\n  const { value: valueProp, disabled } = useComboboxTagGroupItem();\n\n  return (\n    <Primitive.button\n      data-slot=\"combobox-tag-group-item-remove\"\n      aria-hidden\n      tabIndex={-1}\n      disabled={disabled}\n      onClick={composeEventHandlers(onClick, () =>\n        onValueChange(value.filter((v) => v !== valueProp)),\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction ComboboxInput({\n  ref,\n  onKeyDown,\n  onMouseDown,\n  onFocus,\n  onBlur,\n  ...props\n}: Omit<\n  React.ComponentProps<typeof CommandPrimitive.Input>,\n  \"value\" | \"onValueChange\"\n>) {\n  const {\n    type,\n    inputValue,\n    onInputValueChange,\n    onInputBlur,\n    open,\n    onOpenChange,\n    value,\n    onValueChange,\n    inputRef,\n    disabled,\n    required,\n    tagGroupRef,\n  } = useCombobox();\n\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <CommandPrimitive.Input\n      data-slot=\"combobox-input\"\n      ref={composedRefs}\n      disabled={disabled}\n      required={required}\n      value={inputValue}\n      onValueChange={(search) => {\n        if (!open) {\n          onOpenChange(true);\n        }\n        // Schedule input value change to the next tick.\n        setTimeout(() => onInputValueChange(search, \"inputChange\"));\n        if (!search && type === \"single\") {\n          onValueChange(\"\");\n        }\n      }}\n      onKeyDown={composeEventHandlers(onKeyDown, (event) => {\n        if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n          if (!open) {\n            event.preventDefault();\n            onOpenChange(true);\n          }\n        }\n        if (type !== \"multiple\") {\n          return;\n        }\n        if (event.key === \"ArrowLeft\" && !inputValue && value.length) {\n          tagGroupRef.current?.focus();\n        }\n        if (event.key === \"Backspace\" && !inputValue) {\n          onValueChange(value.slice(0, -1));\n        }\n      })}\n      onMouseDown={composeEventHandlers(onMouseDown, () =>\n        onOpenChange(!!inputValue || !open),\n      )}\n      onFocus={composeEventHandlers(onFocus, () => onOpenChange(true))}\n      onBlur={composeEventHandlers(onBlur, (event) => {\n        if (!event.relatedTarget?.hasAttribute(\"cmdk-list\")) {\n          onInputBlur?.(event);\n        }\n      })}\n      {...props}\n    />\n  );\n}\n\nfunction ComboboxClear({\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Primitive.button>) {\n  const { value, onValueChange, inputValue, onInputValueChange, type } =\n    useCombobox();\n\n  const isValueEmpty = type === \"single\" ? !value : !value.length;\n\n  return (\n    <Primitive.button\n      data-slot=\"combobox-clear\"\n      disabled={isValueEmpty && !inputValue}\n      onClick={composeEventHandlers(onClick, () => {\n        if (type === \"single\") {\n          onValueChange(\"\");\n        } else {\n          onValueChange([]);\n        }\n        onInputValueChange(\"\", \"clearClick\");\n      })}\n      {...props}\n    />\n  );\n}\n\nfunction ComboboxContent({\n  children,\n  onOpenAutoFocus,\n  onInteractOutside,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Content\n      asChild\n      onOpenAutoFocus={composeEventHandlers(onOpenAutoFocus, (event) =>\n        event.preventDefault(),\n      )}\n      onCloseAutoFocus={composeEventHandlers(onOpenAutoFocus, (event) =>\n        event.preventDefault(),\n      )}\n      onInteractOutside={composeEventHandlers(onInteractOutside, (event) => {\n        if (\n          event.target instanceof Element &&\n          event.target.hasAttribute(\"cmdk-input\")\n        ) {\n          event.preventDefault();\n        }\n      })}\n      {...props}\n    >\n      <CommandPrimitive.List data-slot=\"combobox-content\">\n        {children}\n      </CommandPrimitive.List>\n    </PopoverPrimitive.Content>\n  );\n}\n\nconst ComboboxItemContext = React.createContext({ isSelected: false });\n\nfunction useComboboxItem() {\n  const context = React.useContext(ComboboxItemContext);\n  if (!context) {\n    throw new Error(\n      \"<ComboboxItemContext> should only be used within a <ComboboxItem />.\",\n    );\n  }\n\n  return context;\n}\n\nfunction findComboboxItemText(children: React.ReactNode) {\n  let text = \"\";\n\n  React.Children.forEach(children, (child) => {\n    if (text) {\n      return;\n    }\n\n    if (React.isValidElement<{ children: React.ReactNode }>(child)) {\n      if (child.type === ComboboxItemText) {\n        text = child.props.children as string;\n      } else {\n        text = findComboboxItemText(child.props.children);\n      }\n    }\n  });\n\n  return text;\n}\n\nexport interface ComboboxItemProps\n  extends Omit<React.ComponentProps<typeof CommandPrimitive.Item>, \"value\"> {\n  value: string;\n}\n\nfunction ComboboxItem({\n  value: valueProp,\n  children,\n  onMouseDown,\n  ...props\n}: ComboboxItemProps) {\n  const { type, value, onValueChange, onInputValueChange, onOpenChange } =\n    useCombobox();\n\n  const inputValue = React.useMemo(\n    () => findComboboxItemText(children),\n    [children],\n  );\n\n  const isSelected =\n    type === \"single\" ? value === valueProp : value.includes(valueProp);\n\n  return (\n    <ComboboxItemContext.Provider value={{ isSelected }}>\n      <CommandPrimitive.Item\n        data-slot=\"combobox-item\"\n        onMouseDown={composeEventHandlers(onMouseDown, (event) =>\n          event.preventDefault(),\n        )}\n        onSelect={() => {\n          if (type === \"multiple\") {\n            onValueChange(\n              value.includes(valueProp)\n                ? value.filter((v) => v !== valueProp)\n                : [...value, valueProp],\n            );\n            onInputValueChange(\"\", \"itemSelect\");\n          } else {\n            onValueChange(valueProp);\n            onInputValueChange(inputValue, \"itemSelect\");\n            // Schedule open change to the next tick.\n            setTimeout(() => onOpenChange(false));\n          }\n        }}\n        value={inputValue}\n        {...props}\n      >\n        {children}\n      </CommandPrimitive.Item>\n    </ComboboxItemContext.Provider>\n  );\n}\n\nfunction ComboboxItemIndicator(\n  props: React.ComponentProps<typeof Primitive.span>,\n) {\n  const { isSelected } = useComboboxItem();\n\n  if (!isSelected) {\n    return null;\n  }\n\n  return (\n    <Primitive.span\n      data-slot=\"combobox-item-indicator\"\n      aria-hidden\n      {...props}\n    />\n  );\n}\n\nexport interface ComboboxItemTextProps\n  extends React.ComponentProps<typeof React.Fragment> {\n  children: string;\n}\n\nfunction ComboboxItemText(props: ComboboxItemTextProps) {\n  return <React.Fragment {...props} />;\n}\n\nfunction ComboboxTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"combobox-trigger\" {...props} />;\n}\n\nfunction ComboboxAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"combobox-anchor\" {...props} />;\n}\n\nfunction ComboboxPortal({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Portal>) {\n  return <PopoverPrimitive.Portal data-slot=\"combobox-portal\" {...props} />;\n}\n\nfunction ComboboxEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return <CommandPrimitive.Empty data-slot=\"combobox-empty\" {...props} />;\n}\n\nfunction ComboboxLoading({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Loading>) {\n  return <CommandPrimitive.Loading data-slot=\"combobox-loading\" {...props} />;\n}\n\nfunction ComboboxGroup({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return <CommandPrimitive.Group data-slot=\"combobox-group\" {...props} />;\n}\n\nfunction ComboboxSeparator({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator data-slot=\"combobox-separator\" {...props} />\n  );\n}\n\nexport {\n  Combobox as Root,\n  ComboboxTagGroup as TagGroup,\n  ComboboxTagGroupItem as TagGroupItem,\n  ComboboxTagGroupItemRemove as TagGroupItemRemove,\n  ComboboxInput as Input,\n  ComboboxClear as Clear,\n  ComboboxTrigger as Trigger,\n  ComboboxAnchor as Anchor,\n  ComboboxPortal as Portal,\n  ComboboxContent as Content,\n  ComboboxEmpty as Empty,\n  ComboboxLoading as Loading,\n  ComboboxItem as Item,\n  ComboboxItemIndicator as ItemIndicator,\n  ComboboxItemText as ItemText,\n  ComboboxGroup as Group,\n  ComboboxSeparator as Separator,\n};\n",
      "type": "registry:ui"
    }
  ]
}