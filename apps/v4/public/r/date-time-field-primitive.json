{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-time-field-primitive",
  "type": "registry:ui",
  "title": "Date Time Field Primitive",
  "description": "Date Time Field Primitive allows user to enter date and time value.",
  "dependencies": [
    "@radix-ui/react-compose-refs@1.1.2",
    "@radix-ui/react-primitive@2.1.2",
    "timescape"
  ],
  "registryDependencies": [
    "https://ui-x.junwen-k.dev/r/use-timescape.json"
  ],
  "files": [
    {
      "path": "src/registry/new-york/ui/date-time-field-primitive.tsx",
      "content": "\"use client\";\n\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as React from \"react\";\n\nimport {\n  UseTimescapeOptions,\n  useTimescape,\n} from \"@/registry/new-york/hooks/use-timescape\";\n\nexport type DateTimeFieldContextProps = {\n  disabled?: boolean;\n} & ReturnType<typeof useTimescape>;\n\nconst DateTimeFieldContext = React.createContext<DateTimeFieldContextProps>({\n  getInputProps: () => ({ ref: () => null }),\n  getRootProps: () => ({ ref: () => null }),\n  options: {},\n  disabled: false,\n});\n\nexport function useDateTimeField() {\n  const context = React.useContext(DateTimeFieldContext);\n  if (!context) {\n    throw new Error(\n      \"useDateTimeField must be used within a <DateTimeField />.\",\n    );\n  }\n\n  return context;\n}\n\nexport interface DateTimeFieldProps\n  extends UseTimescapeOptions,\n    Omit<React.ComponentProps<typeof Primitive.div>, \"value\" | \"defaultValue\"> {\n  disabled?: boolean;\n}\n\nexport function DateTimeField({\n  value,\n  defaultValue,\n  onValueChange,\n  disabled,\n  digits,\n  hour12,\n  maxDate,\n  minDate,\n  snapToStep,\n  wheelControl,\n  wrapAround,\n  ref,\n  ...props\n}: DateTimeFieldProps) {\n  const timescape = useTimescape({\n    value,\n    defaultValue,\n    onValueChange,\n    digits,\n    hour12,\n    maxDate,\n    minDate,\n    snapToStep,\n    wheelControl,\n    wrapAround,\n  });\n\n  const { ref: rootRef, ...rootProps } = timescape.getRootProps();\n  const composedRefs = useComposedRefs(ref, (node) => rootRef(node)!);\n\n  return (\n    <DateTimeFieldContext.Provider value={{ ...timescape, disabled }}>\n      <Primitive.div\n        data-slot=\"date-time-field\"\n        ref={composedRefs}\n        data-disabled={disabled}\n        {...rootProps}\n        {...props}\n      />\n    </DateTimeFieldContext.Provider>\n  );\n}\n\nexport function DateTimeFieldSeparator({\n  ref,\n  ...props\n}: React.ComponentProps<typeof Primitive.span>) {\n  const { disabled } = useDateTimeField();\n\n  return (\n    <Primitive.span\n      data-slot=\"date-time-field-separator\"\n      ref={ref}\n      aria-hidden=\"true\"\n      data-disabled={disabled}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeFieldYears({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeField();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"years\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-field-years\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeFieldMonths({\n  disabled: disabledProp,\n  ref,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeField();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"months\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-field-months\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeFieldDays({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeField();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"days\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-field-days\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeFieldHours({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeField();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"hours\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-field-hours\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeFieldMinutes({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeField();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"minutes\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-field-minutes\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeFieldSeconds({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled } = useDateTimeField();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"seconds\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-field-seconds\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport function DateTimeFieldAmPm({\n  ref,\n  disabled: disabledProp,\n  ...props\n}: React.ComponentProps<typeof Primitive.input>) {\n  const { getInputProps, disabled, options } = useDateTimeField();\n  const { ref: inputRef, ...inputProps } = getInputProps(\"am/pm\");\n  const composedRefs = useComposedRefs(ref, inputRef);\n\n  if (!options?.hour12) {\n    return null;\n  }\n\n  return (\n    <Primitive.input\n      data-slot=\"date-time-field-am-pm\"\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  );\n}\n\nexport {\n  DateTimeField as Root,\n  DateTimeFieldSeparator as Separator,\n  DateTimeFieldDays as Days,\n  DateTimeFieldMonths as Months,\n  DateTimeFieldYears as Years,\n  DateTimeFieldHours as Hours,\n  DateTimeFieldMinutes as Minutes,\n  DateTimeFieldSeconds as Seconds,\n  DateTimeFieldAmPm as AmPm,\n};\n",
      "type": "registry:ui"
    }
  ]
}