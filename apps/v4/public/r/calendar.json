{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar",
  "type": "registry:ui",
  "title": "Calendar",
  "description": "A calendar component lets users select a date without any input or popper / modal.",
  "dependencies": [
    "react-day-picker",
    "date-fns"
  ],
  "files": [
    {
      "path": "src/registry/new-york/ui/calendar.tsx",
      "content": "\"use client\";\n\nimport {\n  ChevronDown,\n  ChevronLeft,\n  ChevronRight,\n  ChevronUp,\n} from \"lucide-react\";\nimport * as React from \"react\";\nimport { DayPicker, UI, useDayPicker } from \"react-day-picker\";\n\nimport { buttonVariants } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { cn } from \"@/lib/utils\";\n\nfunction Calendar({\n  captionLayout = \"label\",\n  className,\n  classNames,\n  showOutsideDays = true,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker>) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      captionLayout={captionLayout}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        button_next: cn(\n          buttonVariants({ variant: \"outline\", size: \"icon\" }),\n          \"size-7 opacity-50 hover:opacity-100\",\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: \"outline\", size: \"icon\" }),\n          \"size-7 opacity-50 hover:opacity-100\",\n        ),\n        caption_label: \"text-sm font-medium aria-hidden:hidden\",\n        day_button: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"size-8 font-normal\",\n        ),\n        day: \"p-0 text-center text-sm\",\n        disabled: \"*:text-muted-foreground *:opacity-50\",\n        dropdown: \"first:basis-3/5 last:basis-2/5\",\n        dropdowns: \"flex basis-full items-center gap-2 text-sm font-medium\",\n        hidden: \"invisible\",\n        month_caption: \"flex items-center justify-center pt-1\",\n        month_grid: \"w-full border-collapse space-y-1\",\n        month: cn(\n          \"space-y-4\",\n          captionLayout !== \"label\" && !props.hideNavigation && \"mt-9\",\n        ),\n        months:\n          \"relative flex flex-col gap-y-4 sm:flex-row sm:gap-x-4 sm:gap-y-0\",\n        nav: \"absolute flex w-full items-center justify-between space-x-1 px-1\",\n        outside: \"[&>button]:text-muted-foreground\",\n        // Join start cell.\n        range_end:\n          \"before:bg-accent relative isolate before:absolute before:inset-0 before:rounded-r-md after:hidden [&>button]:relative [&>button]:z-10\",\n        range_middle: cn(\n          \"relative isolate\",\n          \"before:bg-accent relative before:absolute before:inset-0 before:rounded-r-md first:before:rounded-l-md [&>button]:relative [&>button]:z-10\",\n          \"after:bg-accent relative after:absolute after:inset-0 after:rounded-l-md last:after:rounded-r-md [&>button]:relative [&>button]:z-10\",\n          \"aria-selected:[&>button]:bg-accent aria-selected:[&>button]:text-accent-foreground\",\n        ),\n        // Join end cell.\n        range_start:\n          \"after:bg-accent relative isolate before:hidden after:absolute after:inset-0 after:rounded-l-md [&>button]:relative [&>button]:z-10\",\n        selected: cn(\n          \"[&>button]:bg-primary [&>button]:text-primary-foreground [&>button]:hover:bg-primary [&>button]:hover:text-primary-foreground\",\n        ),\n        today:\n          \"[&>button]:bg-primary [&>button]:text-primary-foreground [&>button]:hover:bg-primary [&>button]:hover:text-primary-foreground\",\n        week: \"mt-2 flex w-full\",\n        weekday: \"text-muted-foreground w-8 text-[0.8rem] font-normal\",\n        weekdays: \"flex\",\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ orientation }) => {\n          switch (orientation) {\n            case \"up\":\n              return <ChevronUp className=\"size-4\" />;\n            case \"down\":\n              return <ChevronDown className=\"size-4\" />;\n            case \"left\":\n              return <ChevronLeft className=\"size-4\" />;\n            case \"right\":\n            default:\n              return <ChevronRight className=\"size-4\" />;\n          }\n        },\n        Dropdown: ({\n          \"aria-label\": ariaLabel,\n          disabled,\n          value,\n          onChange,\n          options,\n          className,\n        }) => {\n          const { classNames } = useDayPicker();\n\n          return (\n            <Select\n              disabled={disabled}\n              value={`${value}`}\n              onValueChange={(value) =>\n                onChange?.({\n                  target: { value },\n                } as React.ChangeEvent<HTMLSelectElement>)\n              }\n            >\n              <SelectTrigger\n                aria-label={ariaLabel}\n                className={cn(classNames[UI.Dropdown], className)}\n              >\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {options?.map((option) => (\n                  <SelectItem\n                    key={option.value}\n                    value={`${option.value}`}\n                    disabled={option.disabled}\n                  >\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          );\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  );\n}\n\nexport { Calendar };\n",
      "type": "registry:ui"
    }
  ]
}